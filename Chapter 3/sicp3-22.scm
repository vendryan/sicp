(define (print line)
  (display line)
  (newline))

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr  (cons '() '())))
    (define (empty-queue?)
      (null? front-ptr))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue?)
                (set! front-ptr new-pair)
                (set-car! rear-ptr new-pair))
              (else
                (set-cdr! (car rear-ptr) new-pair)
                (set-car! rear-ptr new-pair)))))
    (define (delete-queue!)
      (cond ((empty-queue?)
              (error "DELETE queue but empty" front-ptr))
            (else
              (set! front-ptr (cdr front-ptr)))))
    (define (dispatch m)
      (cond ((eq? m 'front-queue)
              (if (empty-queue?) 
                  (error "FRONT queue is empty" front-ptr)
                  (car front-ptr)))
            ((eq? m 'insert!) insert-queue!)
            ((eq? m 'delete!) delete-queue!)
            ((eq? m 'front-ptr) front-ptr)
            (else (error "INVALID command" m))))
    dispatch))

(define (insert-queue! queue item)
  ((queue 'insert!) item))
(define (delete-queue! queue)
  ((queue 'delete!)))
(define (front-queue queue)
  (queue 'front-queue))
(define (print-queue queue)
  (print (queue 'front-ptr)))

(define q1 (make-queue))
(insert-queue! q1 'a)
(print-queue q1)
(insert-queue! q1 'b)
(print-queue q1)
(insert-queue! q1 'c)
(print-queue q1)
(print (front-queue q1))
(delete-queue! q1)
(print-queue q1)
(insert-queue! q1 'a)
(print-queue q1)
(delete-queue! q1)
(delete-queue! q1)
(delete-queue! q1)
(print-queue q1)
; ERROR (delete-queue! q1) ; ERROR
