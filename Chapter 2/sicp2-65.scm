(define (print line)
  (display line)
  (newline))

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (tree->list tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))

(define (intersection-set set1 set2)
  (define (intersection-list set1 set2)
    (if (or (null? set1) (null? set2))
        '()    
        (let ((x1 (car set1)) (x2 (car set2)))
          (cond ((= x1 x2)
                 (cons x1
                       (intersection-list (cdr set1)
                                         (cdr set2))))
                ((< x1 x2)
                 (intersection-list (cdr set1) set2))
                ((< x2 x1)
                 (intersection-list set1 (cdr set2)))))))
  (let ((first (tree->list set1))                    ; O(n)
        (second (tree->list set2)))                  ; O(n)
    (list->tree (intersection-list first second))))  ; O(n) + O(n)
; overall time O(n) (remove unsignificant constant)
  

(define (union-set set1 set2)
  (define (union-list set1 set2)
    (if (or (null? set1) (null? set2))
        (if (null? set1) set2 set1)
        (let ((x1 (car set1)) (x2 (car set2)))
          (cond ((= x1 x2)
                 (cons x1
                       (union-list (cdr set1)
                                   (cdr set2))))
                ((< x1 x2)
                 (cons x1
                       (union-list (cdr set1)
                                   set2)))
                ((< x2 x1)
                 (cons x2
                       (union-list set1
                                   (cdr set2))))))))
  (let ((first (tree->list set1))                    ; O(n)
        (second (tree->list set2)))                  ; O(n)
    (list->tree (union-list first second))))  ; O(n) + O(n)
; overall time O(n) (remove unsignificant constant)

(define test (list->tree (list 1 2 3 4 5 6 7)))
(define test2 (list->tree (list 1 3 5 7 9 11)))
(print test)
(print test2)
(print (tree->list test))
(print (tree->list test2))
(print (intersection-set test test2))
(print (union-set test test2))
